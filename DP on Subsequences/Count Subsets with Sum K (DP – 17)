
Note : 
1. Doing only 2 solutions right now, Recursion and Memoization. 


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 1 : Recursion (Will give TLE)

public class Solution {
    public static int findWays(int num[], int tar) {
        // Write your code here..
        int n=num.length;
        
        return solUtil(n-1,num,tar);
    }
    
    public static int solUtil(int index,int[] num,int tar){
        
        if(index==0){
            
            if(tar==0 && num[0]==0) return 2;
            
            if(tar==0 || tar==num[0]) return 1;
            
            return 0;
        }
        
        
        int notTaken=solUtil(index-1,num,tar);
        
        int taken=0;
        if(num[index]<=tar){
            taken=solUtil(index-1,num,tar-num[index]);
        }
        
        return taken+notTaken;
        
    }
}








//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 2 : Memoization

TC : O(N*K) || SC :(N*K) + O(N) 

*******************************

import java.util.*;

public class Solution {
    public static int findWays(int num[], int tar) {
        // Write your code here..
        int n=num.length;
        int[][] dp=new int[n][tar+1];
        
        for(int[] x:dp){
            Arrays.fill(x,-1);
        }
        
        return solUtil(n-1,num,tar,dp);
    }
    
    public static int solUtil(int index,int[] num,int tar,int[][] dp){
        
        if(index==0){
            
            if(tar==0 && num[0]==0) return 2;
            
            if(tar==0 || tar==num[0]) return 1;
            
            return 0;
        }
        
        if(dp[index][tar]!=-1) return dp[index][tar];
        
        int notTaken=solUtil(index-1,num,tar,dp);
        
        int taken=0;
        if(num[index]<=tar){
            taken=solUtil(index-1,num,tar-num[index],dp);
        }
        
        return dp[index][tar]=taken+notTaken;
        
    }
}




