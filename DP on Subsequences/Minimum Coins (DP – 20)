LeetCode Link : https://leetcode.com/problems/coin-change/





//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 1: Recursion (Will give TLE)

class Solution {
    public int coinChange(int[] coins, int amount) {
       
        int n=coins.length;
        
        if(solUtil(coins,n-1,amount)!=(int)Math.pow(10,9))
            return solUtil(coins,n-1,amount);
        
        return -1;
    }
    
    public int solUtil(int[] coins,int index,int amount){
        
        
        if(index==0) 
        {
        
            if(amount%coins[index]==0) return amount/coins[index];
            else return (int)Math.pow(10,9);
        }
        
        int notTake=solUtil(coins,index-1,amount);
        
        int take=(int)Math.pow(10,9);
        if(coins[index]<=amount){
            take=1+solUtil(coins,index,amount-coins[index]);
        }
        
        return Math.min(take,notTake);
    }
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 2: Memoization





//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 3: Tabulation
