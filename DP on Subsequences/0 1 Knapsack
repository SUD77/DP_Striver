


Note : 

1. You can understand, this code only if you draw recursion tree. 
2. Logic of recurison tree is , f(index,Weight) - to take it or not take it. 
3. Also, Dp array, I have made of n+1, W+1 size. Their inital row, i.e dp[0][0...to...W] and dp[1...to....n][0] = 0;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 1 : Recursion (Will give TLE)


public class Solution{
    static int knapsack(int[] weight, int[] value, int n, int maxWeight)     {
        
        return maxValue(weight,value,n,maxWeight);

    }
    
    public static int maxValue(int[] weight, int[] value, int n, int W){
        
        if(n==0 || W==0) return 0;
        
        int notTake=maxValue(weight,value,n-1,W);
        
        int take=0;
        if(weight[n-1]<=W){
            take=value[n-1]+maxValue(weight,value,n-1,W-weight[n-1]);
        }
        
        return Math.max(take,notTake);
        
    }
}




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 2 : Memoization 

import java.util.*;

public class Solution{
    static int knapsack(int[] weight, int[] value, int n, int maxWeight)     {
        int[][] dp=new int[n+1][maxWeight+1];
        
        for(int[] x:dp){
            Arrays.fill(x,-1);
        }
        
        return maxValue(weight,value,n,maxWeight,dp);

    }
    
    public static int maxValue(int[] weight, int[] value, int n, int W,int[][] dp){
        
        
        if(dp[n][W]!=-1) return dp[n][W];
        
        if(n==0 || W==0) return dp[n][W]=0;
        
        int notTake=maxValue(weight,value,n-1,W,dp);
        
        int take=0;
        if(weight[n-1]<=W){
            take=value[n-1]+maxValue(weight,value,n-1,W-weight[n-1],dp);
        }
        
        return dp[n][W]=Math.max(take,notTake);
        
    }
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 3: Tabulation 



import java.util.*;

public class Solution{
    
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
        int[][] dp=new int[n+1][maxWeight+1];
        
      for(int i=0;i<=n;i++){
          dp[i][0]=0;
      }

        for(int i=0;i<=maxWeight;i++){
            dp[0][i]=0;
        }
        
        for(int i=1;i<=n;i++){
            
           
            for(int j=1;j<=maxWeight;j++){
                
                
                int notTake=dp[i-1][j];
        
                int take=0;
                if(weight[i-1]<=j){
                    take=value[i-1]+dp[i-1][j-weight[i-1]];
                }
                
                dp[i][j]=Math.max(take,notTake);
                
            }
        }
        
        return dp[n][maxWeight];

    }
   
}
