

Note : 
1. Have written the intuition in Recursion part of it. Look below in Recursion part.
2. Question is similar to Coins Change (Minimum coins) problem. Both have logic for base case. 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 1: Recursion (Will give TLE)

Note : 
1. For this, our index starts from size n and goes till index==1, as index=0 wont be there, as these array index represent the length of rod. 
2. But in price we have to add, price[index-1], otherwise it will give error ArrayOutIndex.
3. In base case, when we last index (of available length i.e index=1), we need to check if using that length multiple times we can build the log,
so thats why we handle base case as, n%index and add the price accordingly. 




**********************************************************************************************************************

public class Solution {
	public static int cutRod(int price[], int n) {
		// Write your code here.
        int index=n;
        
        return solUtil(index,price,n);
	}
    
    public static int solUtil(int index,int price[],int n){
        
        
        if(index==1){
            
            
            /*Important case*/
            
            if(n%index==0) return (n/index)*price[index-1];
            else return 0;
        }
        
        int notTaken=solUtil(index-1,price,n);
        
        int taken=0;
        
        if(n>=index){
            taken=price[index-1]+solUtil(index,price,n-index);
        }
        
        
        return Math.max(taken,notTaken);
        
        
    }
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 2 : Memoization 


import java.util.*;

public class Solution {
	public static int cutRod(int price[], int n) {
		// Write your code here.
        int index=n;
        
        int[][] dp=new int[index+1][n+1];
        
        for(int[] x:dp){
            Arrays.fill(x,-1);
        }
        
        return solUtil(index,price,n,dp);
	}
    
    public static int solUtil(int index,int price[],int n,int[][] dp){
        
        
        if(index==1){
            
            if(n%index==0) return (n/index)*price[index-1];
            else return 0;
        }
        
        if(dp[index][n]!=-1) return dp[index][n];
        
        int notTaken=solUtil(index-1,price,n,dp);
        
        int taken=0;
        
        if(n>=index){
            taken=price[index-1]+solUtil(index,price,n-index,dp);
        }
        
        
        return dp[index][n]=Math.max(taken,notTaken);
        
        
    }
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 3 : Tabulation


// TC - O(n*n)
// SC - O(n*n)


import java.util.*;

public class Solution {
	public static int cutRod(int price[], int n) {
		// Write your code here.

		int index=n;

		int[][] dp=new int[index+1][n+1];

		for(int i=0;i<=n;i++){
			if(i%1 == 0 ) dp[1][i]=(i/1) * price[0];
			else dp[1][i]=0;
		}

		for(int i=2;i<=index;i++){

			for(int j=0;j<=n;j++){


				int notPick=dp[i-1][j]; 

				int pick=0;
				if(j>=i){
					pick=price[i-1] + dp[i][j-i]; 
				}

				dp[i][j]=Math.max(pick,notPick);
			}
		}


		return dp[index][n]; 
	}

	
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 4 : Space Optimization


//Space optimization 
// TC - O(n*n)
// SC - O(n)

import java.util.*;

public class Solution {
	public static int cutRod(int price[], int n) {
		// Write your code here.

		int index=n;

	
		int[] prev=new int[n+1];

		for(int i=0;i<=n;i++){
			if(i%1 == 0 ) prev[i]=(i/1) * price[0];
		}

		for(int i=2;i<=index;i++){

			int[] curr=new int[n+1];
			for(int j=0;j<=n;j++){


				int notPick=prev[j]; 

				int pick=0;
				if(j>=i){
					pick=price[i-1] + curr[j-i]; 
				}

				curr[j]=Math.max(pick,notPick);
			}

			prev=curr;
		}


		return prev[n]; 
	}

	
}
