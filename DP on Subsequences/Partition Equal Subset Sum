
Note : 
1. This q s similar to "Subset Sum equals to target"
2. Here, sum/2 is ou target. 


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 1: Recursion
(Will give TLE)

TC = O(2^N) -for every index we have two possibilities pick and not pick    |    SC= O(N) -> aux stack space



*****************************

class Solution {
    public boolean canPartition(int[] nums) {
        
        int sum=0;
        
        for(int x:nums){
            sum+=x;    
        }
        
        if(sum%2!=0) return false;
        sum=sum/2;
      
        
        return solUtil(nums.length-1,sum,nums);
        
    }
    
    public boolean solUtil(int index,int target,int[] arr){
        
        if(target==0) return true;
        if(index==0) return arr[0]==target;
        
        boolean notTake=solUtil(index-1,target,arr);
        
        boolean take=false;
        if(target>=arr[index]){
            take=solUtil(index-1,target-arr[index],arr);
        }
        
        return take||notTake;
        
    }
}







/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 2: Memoization


TC = O(N*K) + O(N)   |    SC= O(N*K) + O(N)



*****************************

class Solution {
    public boolean canPartition(int[] nums) {
        
        
        int sum=0;
        
        for(int x:nums){
            sum+=x;    
        }
        
        if(sum%2!=0) return false;
        sum=sum/2;
        
        
        
        //dp. 
        int dp[][]=new int[nums.length][sum+1];
        
        for(int[] x:dp){
            Arrays.fill(x,-1);
        }
        
      
        int ans=solUtil(nums.length-1,sum,nums,dp);
        
        if(ans==1) return true;
        
        return false;
    }
    
    public int solUtil(int index,int target,int[] arr,int[][] dp){
        
        if(dp[index][target]!=-1) return dp[index][target];
        
        if(target==0) return 1;
        if(index==0){
            
            if(arr[0]==target) return 1;
            else return 0;
        } 
            
        
        int notTake=solUtil(index-1,target,arr,dp);
        
        int take=0;
        if(target>=arr[index]){
            take=solUtil(index-1,target-arr[index],arr,dp);
        }
        
        if(take==0 && notTake==0){
            dp[index][target]=0;
        }else{
            dp[index][target]=1;
        }
        
        return dp[index][target];
        
    }
}




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 3: Tabulation


TC =O(N*K) +O(N)  |  O(N*K)



*****************************



class Solution {
    public boolean canPartition(int[] nums) {
        
        
        int sum=0;
        
        for(int x:nums){
            sum+=x;    
        }
        
        if(sum%2!=0) return false;
        sum=sum/2;
        
        
        
        //dp. 
        boolean dp[][]=new boolean[nums.length+1][sum+1];
        
        for(int i=0;i<=nums.length;i++){
            
            for(int j=0;j<=sum;j++){
                
                if(i==0 && j!=0){
                    dp[i][j]=false;
                }else if(j==0){
                    dp[i][j]=true;
                }else{
                    
                    if(j>=nums[i-1]){
                        dp[i][j]=dp[i-1][j-nums[i-1]] || dp[i-1][j];
                    }else{
                        dp[i][j]=dp[i-1][j];
                    }
                }
            }
        }
    
        return dp[nums.length][sum];
    }
    
  
}


