

Note : 
1. Need to do this q again. 
2. Didnt implemente Space Optimization. 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 1 : Recursion (Will give TLE)

public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        // Write your code here.
        
        return solUtil(n-1,arr,k);
    }
    
    public static boolean solUtil(int index,int[] arr,int target){
        
        if(target==0) return true;
        
        if(index==0) return arr[index]==target;
        
        boolean notTake=solUtil(index-1,arr,target);
        
        boolean take=false;
        if(target>=arr[index]){
            take=solUtil(index-1,arr,target-arr[index]);
        }
        
        return take || notTake;
    }
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 2 : Memoization 


import java.util.*;

public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        // Write your code here.
        
        int[][] dp=new int[n+1][k+1];
        
        for(int[] x:dp){
            Arrays.fill(x,-1);
        }
        
        int ans=solUtil(n-1,arr,k,dp);
        
        if(ans==1) return true;
        return false;
    }
    
    public static int solUtil(int index,int[] arr,int target,int[][] dp){
        
        if(dp[index][target]!=-1) return dp[index][target];
        if(target==0) return 1;
        
        if(index==0) {
            if( arr[index]==target) return 1;
            else return 0;
        }
           
        
        int notTake=solUtil(index-1,arr,target,dp);
        
        int take=0;
        if(target>=arr[index]){
            take=solUtil(index-1,arr,target-arr[index],dp);
        }
        
        
        if(take==0 && notTake==0){
            dp[index][target]=0;
        }else{
            dp[index][target]=1;
        }
        return dp[index][target];
    }
}



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 3: Tabulation 


import java.util.Arrays;

public class Solution {
    static boolean[][] dp;
    public static boolean subsetSumToK(int n, int k, int arr[]){
        // Write your code here.
        dp = new boolean[n+1][k+1];
        
        for(int i=0;i<=n;i++){
            for(int j=0;j<=k;j++){
                
                if(i==0 && j!=0){
                    dp[i][j]=false;
                }else if(j==0){
                    dp[i][j]=true;
                }else{
                    
                    if(j>=arr[i-1]){
                        dp[i][j]=dp[i-1][j-arr[i-1]] || dp[i-1][j];
                    }else{
                        dp[i][j]=dp[i-1][j];
                    }
                }
                
            }
            
          
        }
        
          return dp[n][k];
    }

   
}

