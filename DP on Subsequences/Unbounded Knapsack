
Note : 
1. Question is similar to 01 knapsack. 


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 1: Recursion (Will give TLE)



public class Solution {
    public static int unboundedKnapsack(int n, int w, int[] profit, int[] weight) {
        // Write your code here.
        
        return maxValue(n,w,profit,weight);
    }
    
    public static int maxValue(int n,int w,int[] profit,int[] weight){
        
        if(n==0 || w==0) return 0;
        
        int notTake=maxValue(n-1,w,profit,weight);
        
        int take=0;
        if(weight[n-1]<=w){
            take=profit[n-1]+maxValue(n,w-weight[n-1],profit,weight);
        }
        
        return Math.max(take,notTake);
    }
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 2: Memoization


import java.util.*;

public class Solution {
    public static int unboundedKnapsack(int n, int w, int[] profit, int[] weight) {
        // Write your code here.
        
        int[][] dp=new int[n+1][w+1];
        
        for(int[] x:dp){
            Arrays.fill(x,-1);
        }
        
        return maxValue(n,w,profit,weight,dp);
    }
    
    public static int maxValue(int n,int w,int[] profit,int[] weight,int[][] dp){
        
        if(dp[n][w]!=-1) return dp[n][w];
        
        if(n==0 || w==0) return dp[n][w]=0;
        
        int notTake=maxValue(n-1,w,profit,weight,dp);
        
        int take=0;
        if(weight[n-1]<=w){
            take=profit[n-1]+maxValue(n,w-weight[n-1],profit,weight,dp);
        }
        
        return dp[n][w]=Math.max(take,notTake);
    }
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 3: Tabulation 


//TC - O(n*w)
// SC - O(n*w)

import java.util.* ;
import java.io.*; 
public class Solution {
    public static int unboundedKnapsack(int n, int w, int[] profit, int[] weight) {
        // Write your code here.

        int[][] dp=new int[n][w+1];

        for(int i=0;i<=w;i++){
            dp[0][i]= (i/weight[0])*profit[0];
        } 

        for(int i=1;i<n;i++){

            for(int j=0;j<=w;j++){

                int notPick=dp[i-1][j] ; 

                int pick=0;
                if(j>=weight[i]){
                    pick=profit[i] + dp[i][j-weight[i]];
                }

                dp[i][j]=Math.max(pick,notPick);
                    
            }
        }

        return dp[n-1][w]; 
    }

}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 4: Space Optimization


//TC - O(n*w)
// SC - O(w)


import java.util.* ;
import java.io.*; 
public class Solution {
    public static int unboundedKnapsack(int n, int w, int[] profit, int[] weight) {
        // Write your code here.

        int[] prev=new int[w+1];

        for(int i=0;i<=w;i++){
            prev[i]= (i/weight[0])*profit[0];
        } 

        for(int i=1;i<n;i++){

            int[] curr=new int[w+1];

            for(int j=0;j<=w;j++){

                int notPick=prev[j] ; 

                int pick=0;
                if(j>=weight[i]){
                    pick=profit[i] + curr[j-weight[i]];
                }

                curr[j]=Math.max(pick,notPick);
                    
            }

            prev=curr;
        }

        return prev[w]; 
    }

}

