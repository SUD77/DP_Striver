
Problem Link : https://www.codingninjas.com/codestudio/problems/frog-jump_3621012?source=youtube&campaign=striver_dp_videos&leftPanelTab=0

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Logic for Recursion tree : 

Check this image below and read the desc parallely. 

![image](https://user-images.githubusercontent.com/20686188/178294462-4c030e87-2f23-41e6-8477-366b8b8681de.png)

Explanation :
1. You have an array of 4. And you need to reach on N=4. For this, you should reach n-1 i.e 3. 
2. And now, if you see the diagram. I have mentioned, how can you reach 3. Either from step 2 or step 1. And process follows till we reach step 0 on 
all paths. 

3. On all paths, cost has been calculated and path with sum of min cost is our required path. 


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

Solution 1: Recursion


public class Solution {
    public static int frogJump(int n, int heights[]) {

        // Write your code here..
 
        return solUtil(n-1,heights);
    }
    
    public static int solUtil(int n,int[] heights){
        
        if(n==0) return 0;
        if(n==1) return Math.abs(heights[1]-heights[0]);
        
        int x= Math.abs((heights[n]-heights[n-1])) + solUtil(n-1,heights);
        int y= Math.abs((heights[n]-heights[n-2]))+ solUtil(n-2,heights);
        
        return Math.min(x,y);
    }

}


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


Solution 2: Memoization




import java.util.Arrays;

public class Solution {
    public static int frogJump(int n, int heights[]) {

        // Write your code here..
        int dp[]=new int[n+1];
        
        Arrays.fill(dp,-1);
 
        solUtil(n-1,heights,dp);
        
        return dp[n-1] ;
    }
    
    public static int solUtil(int n,int[] heights,int[] dp){
        
        if(dp[n]!=-1) return dp[n];
        
        if(n==0) return 0;
        if(n==1) return Math.abs(heights[1]-heights[0]);
        
        dp[0]=0;
        dp[1]=Math.abs(heights[1]-heights[0]);
        
        int x= Math.abs((heights[n]-heights[n-1])) + solUtil(n-1,heights,dp);
        int y= Math.abs((heights[n]-heights[n-2]))+ solUtil(n-2,heights,dp);
        
        return dp[n]=Math.min(x,y);
    }

} 


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

Solution 3: Tabulation







