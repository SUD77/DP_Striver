LeetCode link : https://leetcode.com/problems/edit-distance/






//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 1 : Recursion

class Solution {
    public int minDistance(String word1, String word2) {
        
        int len1=word1.length();
        int len2=word2.length();
        
        return solUtil(word1,word2,len1-1,len2-1);
    }
    
    public int solUtil(String s1,String s2,int index1,int index2){
        
        //s1 is exhausted
        if(index1<0) return index2+1;  
        
        //s2 is exhausted
        if(index2<0) return index1+1;
        
        
        
        if(s1.charAt(index1)==s2.charAt(index2)) 
            return solUtil(s1,s2,index1-1,index2-1);
        
        
        //if not equal then do insert,replace,delete
        
        int insert=1+solUtil(s1,s2,index1,index2-1);
        int delete=1+solUtil(s1,s2,index1-1,index2);
        int replace=1+solUtil(s1,s2,index1-1,index2-1);
        
        return Math.min(insert, Math.min(delete,replace));
        
    }
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 2 : Memoization





//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 3 : Tabulation




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 4 : Space Optimization
