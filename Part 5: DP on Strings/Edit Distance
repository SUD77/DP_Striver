LeetCode link : https://leetcode.com/problems/edit-distance/


Note : 

1. In recursion tree, f(index1,index2) means that, in how many min no of steps,  string1[0....index1] will be converted to s2[0..index2]. For example,
we have string s1="horse" and s2="ros" . And we call f(1,0), this means that, in how many Min steps, s1="ho" will be converted to s2="r" . Answer will be 2
(by 1 delete and 1 replace). 

2. Similar logic applies to dp[index1][index2] array too. 

3. For Tabulation, 
    :- some shifting of index is done. As if call f(index1,index2), these indexes can go less than 0 too (as mentioned in our base fro memoization).
But in case of storing these values in dp array, this can create problem. That's why we shift the index by +1. (Shifitng by +1 can be done in memo itself, but 
I kept the recursion base case as it is and converted that into memo)



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 1 : Recursion

class Solution {
    public int minDistance(String word1, String word2) {
        
        int len1=word1.length();
        int len2=word2.length();
        
        return solUtil(word1,word2,len1-1,len2-1);
    }
    
    public int solUtil(String s1,String s2,int index1,int index2){
        
        //s1 is exhausted
        if(index1<0) return index2+1;  
        
        //s2 is exhausted
        if(index2<0) return index1+1;
        
        
        
        if(s1.charAt(index1)==s2.charAt(index2)) 
            return solUtil(s1,s2,index1-1,index2-1);
        
        
        //if not equal then do insert,replace,delete
        
        int insert=1+solUtil(s1,s2,index1,index2-1);
        int delete=1+solUtil(s1,s2,index1-1,index2);
        int replace=1+solUtil(s1,s2,index1-1,index2-1);
        
        return Math.min(insert, Math.min(delete,replace));
        
    }
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 2 : Memoization

class Solution {
    public int minDistance(String word1, String word2) {
        
        int len1=word1.length();
        int len2=word2.length();
        
        int[][] dp=new int[len1][len2];
        
        for(int[] x:dp){
            Arrays.fill(x,-1);
        }
        
        return solUtil(word1,word2,len1-1,len2-1,dp);
    }
    
    public int solUtil(String s1,String s2,int index1,int index2,int[][] dp){
        
        //s1 is exhausted
        if(index1<0) return index2+1;  
        
        //s2 is exhausted
        if(index2<0) return index1+1;
        
        if(dp[index1][index2]!=-1) return dp[index1][index2];
        
        if(s1.charAt(index1)==s2.charAt(index2)) 
            return dp[index1][index2]=solUtil(s1,s2,index1-1,index2-1,dp);
        
        
        //if not equal then do insert,replace,delete
        
        int insert=1+solUtil(s1,s2,index1,index2-1,dp);
        int delete=1+solUtil(s1,s2,index1-1,index2,dp);
        int replace=1+solUtil(s1,s2,index1-1,index2-1,dp);
        
        return dp[index1][index2]=Math.min(insert, Math.min(delete,replace));
        
    }
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 3 : Tabulation

class Solution {
    public int minDistance(String word1, String word2) {
        
        int len1=word1.length();
        int len2=word2.length();
        
        int[][] dp=new int[len1+1][len2+1];
        
        for(int i=0;i<=len1;i++){
            dp[i][0]=i;
        }
        
        for(int j=0;j<=len2;j++){
            dp[0][j]=j;
        }
        
        
        for(int i=1;i<=len1;i++){
            
            for(int j=1;j<=len2;j++){
                
                if(word1.charAt(i-1)==word2.charAt(j-1)){
                    dp[i][j]=dp[i-1][j-1];
                }
                
                else dp[i][j]=1+Math.min(dp[i-1][j-1],Math.min(dp[i-1][j],dp[i][j-1]));
            }
                
        }
        
        return dp[len1][len2];
    }
    
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 4 : Space Optimization

class Solution {
    public int minDistance(String word1, String word2) {
        
        int len1=word1.length();
        int len2=word2.length();
        
        
        int[] prev=new int[len2+1];
        int[] curr=new int[len2+1];
        
        
        for(int j=0;j<=len2;j++){
            prev[j]=j;
        }
        
        
        for(int i=1;i<=len1;i++){
            
            curr[0]=i;
                
            for(int j=1;j<=len2;j++){
                
                if(word1.charAt(i-1)==word2.charAt(j-1)){
                    curr[j]=prev[j-1];
                }
                
                else curr[j]=1+Math.min(prev[j-1],Math.min(prev[j],curr[j-1]));
            }
            prev = (int[])(curr.clone());
                
        }
        
        return prev[len2];
    }
    
}
