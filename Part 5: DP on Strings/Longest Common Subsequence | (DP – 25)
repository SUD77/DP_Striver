Leetcode Link: https://leetcode.com/problems/longest-common-subsequence/


Note : 

1. Here, if we draw recursion tree, we will make the functions like f(index1,index2). where index1 and index2 are iterations over the len of str1 and
str2. 
2. Meaning of f(index1,index2) : It basically means the value  of len of longest common subsequence till that length. For example, if i call f(2,2), means 
leng of LCS till len of 2 of str1 and len of str2. 



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 1: Recursion


class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
     
        int len1=text1.length();
        int len2=text2.length();
        
        return solUtil(text1,text2,len1-1,len2-1);
    }
    
    public int solUtil(String text1,String text2, int index1,int index2){
        
        if(index1<0 || index2<0) return 0;
        
        if(text1.charAt(index1)==text2.charAt(index2)) 
            return 1+solUtil(text1,text2,index1-1,index2-1);
        
        return 0+Math.max(solUtil(text1,text2,index1-1,index2),solUtil(text1,text2,index1,index2-1));
    }
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 2: Memoization


class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
     
        int len1=text1.length();
        int len2=text2.length();
        
        
        int[][] dp=new int[len1+1][len2+1];
        
        for(int[] x:dp){
            Arrays.fill(x,-1);
        }
        
        return solUtil(text1,text2,len1-1,len2-1,dp);
    }
    
    public int solUtil(String text1,String text2, int index1,int index2,int[][] dp){
        
        
        if(index1<0 || index2<0) return 0;
        
        if(dp[index1][index2]!=-1) return dp[index1][index2];
        
        if(text1.charAt(index1)==text2.charAt(index2)) 
            return dp[index1][index2]=1+solUtil(text1,text2,index1-1,index2-1,dp);
        
        
        return dp[index1][index2]= 0+Math.max(solUtil(text1,text2,index1-1,index2,dp),solUtil(text1,text2,index1,index2-1,dp));
    }
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 3: Tabulation



class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
     
        int len1=text1.length();
        int len2=text2.length();
        
        
        int[][] dp=new int[len1+1][len2+1];
        
        
       
        for(int i=0;i<len2;i++){
           
                dp[0][i]=0;
          
        }
        
        
        
        for(int i=0;i<len1;i++){
                dp[i][0]=0;
            
        }
        
        
        for(int i=1;i<=len1;i++){
            
            
            for(int j=1;j<=len2;j++){
                
                if(text1.charAt(i-1)==text2.charAt(j-1)) 
                {
                    dp[i][j]=1+dp[i-1][j-1];
                }else{
                    dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
                }
        
       
            }
        }
        
        return dp[len1][len2];
    }
    
    
}
