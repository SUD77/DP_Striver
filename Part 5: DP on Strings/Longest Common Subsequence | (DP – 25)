Leetcode Link: https://leetcode.com/problems/longest-common-subsequence/


Note : 

1. Here, if we draw recursion tree, we will make the functions like f(index1,index2). where index1 and index2 are iterations over the len of str1 and
str2. 
2. Meaning of f(index1,index2) : It basically means the value  of len of longest common subsequence till that length. For example, if i call f(2,2), means 
leng of LCS till len of 2 of str1 and len of str2. 



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 1: Recursion

// TC - O(2^len1 * 2^len2)
// SC - O(len1 + len2) + O(len1 * len2)

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        
        int len1=text1.length();
        int len2=text2.length();
        
        return solUtil(text1,text2,0,0);
    }

    public int solUtil(String text1, String text2,int i,int j){
        
        if(i==text1.length() || j==text2.length()){
            return 0;
        }
        
        if(text1.charAt(i)==text2.charAt(j)){
            return 1+solUtil(text1,text2,i+1,j+1);
        }
        
        return Math.max(solUtil(text1,text2,i+1,j),solUtil(text1,text2,i,j+1)); 
    }
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 2: Memoization

// TC - O(len1 * len2)
// SC - O(len1 + len2) + O(len1 * len2)

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        
        int len1=text1.length();
        int len2=text2.length();
        
        int[][] dp=new int[len1][len2];
        
        for(int[] x:dp){
            Arrays.fill(x,-1);
        }
        
        return solUtil(text1,text2,0,0,dp);
    }

    public int solUtil(String text1, String text2,int i,int j,int[][] dp){
        
        if(i==text1.length() || j==text2.length()){
            return 0;
        }
        
        if(dp[i][j]!=-1) return dp[i][j]; 
        
        if(text1.charAt(i)==text2.charAt(j)){
            return 1+solUtil(text1,text2,i+1,j+1,dp);
        }
        
        return dp[i][j]= Math.max(solUtil(text1,text2,i+1,j,dp),solUtil(text1,text2,i,j+1,dp)); 
    }
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 3: Tabulation



//Tabulation 
// TC - O(len1 * len2)
// SC - O(len1 * len2)

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        
        int len1=text1.length();
        int len2=text2.length();
        
        int[][] dp=new int[len1+1][len2+1];
        
        for(int i=0;i<=len2;i++){
            dp[len1][i]=0;
        }
        
        for(int j=0;j<=len1;j++){
            dp[j][len2]=0;
        }
        
        for(int i=len1-1;i>=0;i--){
            
            for(int j=len2-1;j>=0;j--){
                
                if(text1.charAt(i)==text2.charAt(j)){
                    dp[i][j]=1+dp[i+1][j+1]; 
                }else{
                    dp[i][j]= Math.max(dp[i+1][j],dp[i][j+1]); 
                }

                
            }
        }
        
        
        return dp[0][0]; 
    }

}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 4: Space Optimization

//Sapce Optimization
// TC - O(len1 * len2)
// SC - O(len2)

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        
        int len1=text1.length();
        int len2=text2.length();
        
        int[] prev=new int[len2+1];
        
        
        for(int i=0;i<=len2;i++){
            prev[i]=0;
        }
        
        prev[len2]=0;
        
        for(int i=len1-1;i>=0;i--){
            
            int[] curr=new int[len2+1];
            
            for(int j=len2-1;j>=0;j--){
                
                if(text1.charAt(i)==text2.charAt(j)){
                    curr[j]=1+prev[j+1]; 
                }else{
                    curr[j]= Math.max(prev[j],curr[j+1]); 
                }

                
            }
            prev=curr;
        }
        
        
        return prev[0]; 
    }

}
