

Note : Did this q again. You can skip the Part 1. In part-2,  I did properly. 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
PART 1
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Note : 

1. Applied the logic told by striver. So as he directly jumped to tabulation, so applied I coded that only. 
2. Need to do this q again. 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution : Tabulation based


public class Solution {
	public static int lcs(String s1, String s2) {
		// Write your code here.
        
        int len1=s1.length();
        int len2=s2.length();
        
        int[][] dp=new int[len1+1][len2+1];
        int ans=0;
        
        for(int i=1;i<=len1;i++){
            
            for(int j=1;j<=len2;j++){
                
                if(s1.charAt(i-1)==s2.charAt(j-1)){
                    
                    int val=1 + dp[i-1][j-1];
                    dp[i][j]=val;
                    
                    ans=Math.max(ans,val);
                }else{
                    dp[i][j]=0;
                }
            }
        }
        
        return ans;
        
     }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Part - 2 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Solution 1: Recursion 

TC - 
SC - 


import java.util.* ;
import java.io.*; 
public class Solution {
	public static int lcs(String str1, String str2) {
		// Write your code here.

		int len1=str1.length();
		int len2=str2.length();


		return solUtil(len1-1,len2-1,str1,str2,0);
	}

	public static int solUtil(int i,int j,String str1,String str2,int count){

		if(i<0 || j<0) return count;

		if(str1.charAt(i)==str2.charAt(j)){
			count=solUtil(i-1,j-1,str1,str2,count+1);
		}

		count=Math.max(count,Math.max(solUtil(i-1,j,str1,str2,0),solUtil(i,j-1,str1,str2,0)));

		return count;

	}
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Solution 2: Memoization 

TC - 
SC - 
