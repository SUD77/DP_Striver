Leetcode link : https://leetcode.com/problems/longest-palindromic-subsequence/

Note : 
1. Question is similar to LCS. Entirely. 




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 1 : Recursion 

class Solution {
    public int longestPalindromeSubseq(String s) {
        
        
        //Start  : Creating reverse of s
        StringBuffer tempS=new StringBuffer(s);
        tempS.reverse();
        String s2=tempS.toString();
        //End 
        
        
        System.out.println(s2);
        
        int len1=s.length();
        int len2=s2.length();
               
        return solUtil(s,s2,len1-1,len2-1);

    }
    
    public int solUtil(String s1,String s2,int idx1,int idx2){
        
        if(idx1<0 || idx2<0) return 0;
        
        if(s1.charAt(idx1)==s2.charAt(idx2)){
            return 1+solUtil(s1,s2,idx1-1,idx2-1);
        }
        
        
        return Math.max(solUtil(s1,s2,idx1-1,idx2),solUtil(s1,s2,idx1,idx2-1));
        
    }
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 2 : Memoization 


class Solution {
    public int longestPalindromeSubseq(String s) {
        
        
        //Start  : Creating reverse of s
        StringBuffer tempS=new StringBuffer(s);
        tempS.reverse();
        String s2=tempS.toString();
        //End 
        
        
        System.out.println(s2);
        
        int len1=s.length();
        int len2=s2.length();
        
        
        int[][] dp=new int[len1+1][len2+1];
        
        for(int[] x:dp){
            Arrays.fill(x,-1);
        }
               
        return solUtil(s,s2,len1-1,len2-1,dp);

    }
    
    public int solUtil(String s1,String s2,int idx1,int idx2,int[][] dp){
        
        if(idx1<0 || idx2<0) return 0;
        
        if(dp[idx1][idx2]!=-1) return dp[idx1][idx2];
        
        if(s1.charAt(idx1)==s2.charAt(idx2)){
            return dp[idx1][idx2]=1+solUtil(s1,s2,idx1-1,idx2-1,dp);
        }
        
        
        return dp[idx1][idx2]=Math.max(solUtil(s1,s2,idx1-1,idx2,dp),solUtil(s1,s2,idx1,idx2-1,dp));
        
    }
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 3 : Tabulation 

class Solution {
    public int longestPalindromeSubseq(String s) {
        
        
        //Start  : Creating reverse of s
        StringBuffer tempS=new StringBuffer(s);
        tempS.reverse();
        String s2=tempS.toString();
        //End 
        
        int len1=s.length();
        int len2=s2.length();
        
        
        int[][] dp=new int[len1+1][len2+1];
       
        for(int i=0;i<len2;i++){
            dp[0][i]=0;
        }
        
        
        for(int i=0;i<len1;i++){
            dp[i][0]=0;
        }
        
        for(int i=1;i<=len1;i++){
            
            for(int j=1;j<=len2;j++){
                
                if(s.charAt(i-1)==s2.charAt(j-1)){
                    dp[i][j]=1+dp[i-1][j-1];
                }else{
                    dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
                }
        
            }
        }
               
        return dp[len1][len2];

    }
    
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 4 : Space Optimization 

class Solution {
    public int longestPalindromeSubseq(String s) {
        
        
        //Start  : Creating reverse of s
        StringBuffer tempS=new StringBuffer(s);
        tempS.reverse();
        String s2=tempS.toString();
        //End 
        
        int len1=s.length();
        int len2=s2.length();
        
        
        int[] prev=new int[len2+1];
        
        int[] curr=new int[len2+1];
       
        
        for(int i=1;i<=len1;i++){
            
            for(int j=1;j<=len2;j++){
                
                if(s.charAt(i-1)==s2.charAt(j-1)){
                    curr[j]=1+prev[j-1];
                }else{
                    curr[j]=Math.max(prev[j],curr[j-1]);
                }
        
            }
            prev=(int[]) (curr.clone());
        }
               
        return prev[len2];

    }
    
}
