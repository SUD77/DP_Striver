Leetcode link: https://leetcode.com/problems/delete-operation-for-two-strings/


Note : 
1. Question is totally based on LCS. 
2. That's why I am writing only recursion and Memoization here. Rest of the methods can be taken from LCS and modified accrodingly. 

Approach: 
1. Basically, we need to delete those characters from the two strings which are not common in both. 
2. So, remove common portion from length of both strings.


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 1: Recursion

class Solution {
    public int minDistance(String word1, String word2) {
     

        /*
        Appraoch : 
        1. Find lcs of the two strings.
        2. Subtract lcs value from length of longes string
        */
        
        int len1=word1.length();
        int len2=word2.length();

        return len1+len2 - 2 * solUtil(word1,word2,len1-1,len2-1);
    }
    
    public int solUtil(String s1,String s2,int idx1,int idx2){
        
        if(idx1<0 || idx2<0) return 0;
        
        if(s1.charAt(idx1)==s2.charAt(idx2)){
            return 1+solUtil(s1,s2,idx1-1,idx2-1);
        }
        
        return Math.max(solUtil(s1,s2,idx1-1,idx2), solUtil(s1,s2,idx1,idx2-1));
        
    }
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 2: Memoization


class Solution {
    public int minDistance(String word1, String word2) {
     

        /*
        Appraoch : 
        1. Find lcs of the two strings.
        2. Subtract lcs value from length of longes string
        */
        
        int len1=word1.length();
        int len2=word2.length();
        
        int[][] dp=new int[len1+1][len2+1];
        
        for(int[] x:dp){
            Arrays.fill(x,-1);
        }
        
        
        return len1+len2 - 2 * solUtil(word1,word2,len1-1,len2-1,dp);
    }
    
    public int solUtil(String s1,String s2,int idx1,int idx2,int[][] dp){
        
        if(idx1<0 || idx2<0) return 0;
        
        if(dp[idx1][idx2]!=-1) return dp[idx1][idx2];
        
        if(s1.charAt(idx1)==s2.charAt(idx2)){
            return dp[idx1][idx2]=1+solUtil(s1,s2,idx1-1,idx2-1,dp);
        }
        
        return dp[idx1][idx2]=Math.max(solUtil(s1,s2,idx1-1,idx2,dp), solUtil(s1,s2,idx1,idx2-1,dp));
        
    }
}
