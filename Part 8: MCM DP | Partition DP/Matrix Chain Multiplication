

Partition DP Rules : 

1. Start with entire block/array. f(i,j)
2. Try all Partitions
3. Return all best possible 2 partitions. 

To check the explanation of these rules by striver, go to this video and around the timestamp 16 to 19. 
[https://www.youtube.com/watch?v=vRVfmbCFW7Y]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Solution 1 : Recursion

class Solution{
    static int matrixMultiplication(int N, int arr[])
    {
        // code here
        
        return solUtil(1,N-1,arr);
    }
    
    public static int solUtil(int i,int j,int[] arr){
        
        if(i==j) return 0;
        
        int mini=Integer.MAX_VALUE;
        
        for(int k=i;k<j;k++){
            
            int steps = arr[i-1]*arr[k]*arr[j] + solUtil(i,k,arr) + solUtil(k+1,j,arr);
            if(steps < mini) mini =steps;
        }
        
        return mini;
    }
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Solution 2 : Memoization


TC - O(N*N) * N = O(N^3)
SC - O(N^2) + O(N)


********************************************************
class Solution{
    static int matrixMultiplication(int N, int arr[])
    {
        // code here
        int[][] dp=new int[N][N];
        
        for(int[] x:dp){
            Arrays.fill(x,-1);
        }
        
        return solUtil(1,N-1,arr,dp);
    }
    
    public static int solUtil(int i,int j,int[] arr,int[][] dp){
        
        
        if(i==j) return 0;
        
        if(dp[i][j]!=-1) return dp[i][j];
        
        int mini=Integer.MAX_VALUE;
        
        for(int k=i;k<j;k++){
            
            int steps = arr[i-1]*arr[k]*arr[j] + solUtil(i,k,arr,dp) + solUtil(k+1,j,arr,dp);
            if(steps < mini) mini =steps;
        }
        
        return dp[i][j]=mini;
    }
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Solution 3 : Tabulation


class Solution{
    static int matrixMultiplication(int N, int arr[])
    {
        // code here
        int[][] dp=new int[N][N];
        
        for(int i=1;i<N;i++) dp[i][i]=0;
        
        for(int i=N-1;i>=1;i--){
            for(int j=i+1;j<N;j++){
                int mini=Integer.MAX_VALUE;
        
                for(int k=i;k<j;k++){
                    
                    int steps = arr[i-1]*arr[k]*arr[j] + dp[i][k] + dp[k+1][j];
                    if(steps < mini) mini =steps;
                }
                
               dp[i][j]=mini;
            }
        }
        
        return dp[1][N-1];
    }
    
    
}
