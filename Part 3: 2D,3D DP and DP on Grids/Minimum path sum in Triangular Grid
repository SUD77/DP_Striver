

Leetcode link : https://leetcode.com/problems/triangle/


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 1 : Recursion (Will give TLE)

TC = O(2^ (No. of elements in matrix)) | SC= O(N) -> stack space will go upto length of rows in matrix i.e N

***********************************************************************************************************************************************

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
 
        return solUtil(triangle,0,0);
    }
    
    public int solUtil(List<List<Integer>> triangle, int i,int j){
        
        if(i>=triangle.size()) return 0;
        
        int down=solUtil(triangle,i+1,j);
        int right=solUtil(triangle,i+1,j+1);

        return triangle.get(i).get(j) + Math.min(down,right);
    }
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 2 : Memoization

 TC = O(N x N) = No. of states | SC= O(N)-> stack space + O(N x N)-> dp[][] space

***********************************************************************************************************************************************


class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
 
        int row=triangle.size();
        int col=triangle.get(row-1).size();
        
        int[][] dp=new int[row][col];
        
        for(int[] x:dp){
            Arrays.fill(x,-1);
        }
        
        solUtil(triangle,0,0,dp);
        
        return dp[0][0];
    }
    
    public int solUtil(List<List<Integer>> triangle, int i,int j,int[][] dp){
        
        
        if(i>=triangle.size()) return 0;
        
        if(dp[i][j]!=-1) return dp[i][j];
        
        int down=solUtil(triangle,i+1,j,dp);
        int right=solUtil(triangle,i+1,j+1,dp);

        return dp[i][j]=triangle.get(i).get(j) + Math.min(down,right);
    }
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 3 : Tabulation

TC = O(N x N) to compute these states | SC= O(N x N) dp[][] space, no stack space

***********************************************************************************************************************************************


class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
 
        int row=triangle.size();
        int col=triangle.get(row-1).size();
        
        int[][] dp=new int[row][col];
        
       
        
        for(int j=0;j<col;j++){
            dp[row-1][j]=triangle.get(row-1).get(j);
        }
        
        for(int i=row-2;i>=0;i--){
            for(int j=0;j<triangle.get(i).size();j++){

                int down=dp[i+1][j];
                int right=dp[i+1][j+1];
                
                dp[i][j]=triangle.get(i).get(j) + Math.min(down,right);
            }
        }
        
        return dp[0][0];
    }
    
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 4 : Space Optimization

 TC = O(N x N)  | SC = O(N)-> space of next[] of N=columns size

***********************************************************************************************************************************************

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
 
        int row=triangle.size();
        int col=triangle.get(row-1).size();
        
        int[] prev=new int[col];
        
       
        
        for(int j=0;j<col;j++){
            prev[j]=triangle.get(row-1).get(j);
        }
        
        for(int i=row-2;i>=0;i--){
            
            int[] curr=new int[col];
            
            for(int j=0;j<triangle.get(i).size();j++){

                int down=prev[j];
                int right=prev[j+1];
                
                curr[j]=triangle.get(i).get(j) + Math.min(down,right);
            }
            prev=curr;
        }
        
        return prev[0];
    }
    

}


