

Leetcode link : https://leetcode.com/problems/triangle/

Dp Matrix Image : ![image](https://user-images.githubusercontent.com/20686188/179355388-df328374-beea-43a0-a483-fdcfd4703b3e.png)

Expalanation of dp Matrix : 
1. Baically we have to create a dp matrix of max row and col size. 
2. Index in dp matrix will store the min sum possible for them. And our final answer is stored in first index, i.e 0,0


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 1 : Recursion (Will give TLE)

TC = O(2^ (No. of elements in matrix)) | SC= O(N) -> stack space will go upto length of rows in matrix i.e N

***********************************************************************************************************************************************

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
 
        return solUtil(triangle,0,0);
    }
    
    public int solUtil(List<List<Integer>> triangle, int i,int j){
        
        if(i>=triangle.size()) return 0;
        
        int down=solUtil(triangle,i+1,j);
        int right=solUtil(triangle,i+1,j+1);

        return triangle.get(i).get(j) + Math.min(down,right);
    }
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 2 : Memoization

 TC = O(N x N) = No. of states | SC= O(N)-> stack space + O(N x N)-> dp[][] space

***********************************************************************************************************************************************


class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
 
        int row=triangle.size();
        int col=triangle.get(row-1).size();
        
        int[][] dp=new int[row][col];
        
        for(int[] x:dp){
            Arrays.fill(x,-1);
        }
        
        solUtil(triangle,0,0,dp);
        
        return dp[0][0];
    }
    
    public int solUtil(List<List<Integer>> triangle, int i,int j,int[][] dp){
        
        
        if(i>=triangle.size()) return 0;
        
        if(dp[i][j]!=-1) return dp[i][j];
        
        int down=solUtil(triangle,i+1,j,dp);
        int right=solUtil(triangle,i+1,j+1,dp);

        return dp[i][j]=triangle.get(i).get(j) + Math.min(down,right);
    }
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 3 : Tabulation

TC = O(N x N) to compute these states | SC= O(N x N) dp[][] space, no stack space

***********************************************************************************************************************************************


class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
 
        int row=triangle.size();
        int col=triangle.get(row-1).size();
        
        int[][] dp=new int[row][col];
        
       
        
        for(int j=0;j<col;j++){
            dp[row-1][j]=triangle.get(row-1).get(j);
        }
        
        for(int i=row-2;i>=0;i--){
            for(int j=0;j<triangle.get(i).size();j++){

                int down=dp[i+1][j];
                int right=dp[i+1][j+1];
                
                dp[i][j]=triangle.get(i).get(j) + Math.min(down,right);
            }
        }
        
        return dp[0][0];
    }
    
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 4 : Space Optimization

 TC = O(N x N)  | SC = O(N)-> space of next[] of N=columns size
 
 
 Explanation of Space Optimization : 
 1. Bascially, we first create prev array of size of col length. and it initally sotres our base case.
 2. Because using base case we create other values, going up or down. 
 3. And within for loops, we create curr arrat of same col length. and it sores all the values calculated using base case values 
 in prev array. 
 4. After every iteration of second for loop, we assign curr to prev. 
 

***********************************************************************************************************************************************

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
 
        int row=triangle.size();
        int col=triangle.get(row-1).size();
        
        int[] prev=new int[col];
        
       
        
        for(int j=0;j<col;j++){
            prev[j]=triangle.get(row-1).get(j);
        }
        
        for(int i=row-2;i>=0;i--){
            
            int[] curr=new int[col];
            
            for(int j=0;j<triangle.get(i).size();j++){

                int down=prev[j];
                int right=prev[j+1];
                
                curr[j]=triangle.get(i).get(j) + Math.min(down,right);
            }
            prev=curr;
        }
        
        return prev[0];
    }
    

}


