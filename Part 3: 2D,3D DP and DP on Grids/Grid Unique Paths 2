
Leetcode Link : https://leetcode.com/problems/unique-paths-ii/

***********************************************

Note : 
1. This problem is similat to Grid Unique Path -1. 
2. So, I havent added recursion Tree image and dp matrix image here. They are same as I have used in Grid path 1. Here the link to understand visually: 
https://github.com/SUD77/DP_Striver/blob/main/Part%203:%202D%2C3D%20DP%20and%20DP%20on%20Grids/Grid%20Unique%20Paths%20:%20DP%20on%20Grids

3. For this problem, I haven't done SPACE OPTIMIZATION. As it is not that imp for interviews. 

***********************************************

Regarding Solution Implementation : 

1. I have implemented both Recursion and Memoization as bottom-up. That's why final answer is stored in d[0][0]. 
2, This is implemented in the similar fashion to Grid Unique Path-1

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

**********************************
Solution 1 : Recursion (Gives TLE)
**********************************


************************************************************************************************************************

TC = O(2^ (MxN)) | SC= O(length of path) = O(m-1 + n-1) -> stack space will go length of path deeper

**************************************************************************************************************************


class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        
        int m=obstacleGrid.length;
        int n=obstacleGrid[0].length;
        
        return solUtil(obstacleGrid,m,n,0,0);
        
    }
    
    

    public int solUtil(int[][] nums,int m,int n,int i,int j){
        
       
        
        if(i>=m || j>=n) return 0;
        if(nums[i][j]==1) return 0;    //obstacle
        if(i==m-1 && j==n-1) return 1;
        
        int count=0;
        
        int right=solUtil(nums,m,n,i,j+1);
        int down=solUtil(nums,m,n,i+1,j);
        
        
        
        count=right+down;
        
        
        return count;
    }
}





//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

**********************************
Solution 2 : Memoization 
**********************************


************************************************************************************************************************

                                    stack space is path length  +  dp[][] space
TC = O(M x N) = No. of states |     SC= O(m-1 + n-1)            +  O(M x N) 

**************************************************************************************************************************


class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        
        int m=obstacleGrid.length;
        int n=obstacleGrid[0].length;
        
        int[][] dp=new int[m][n];
        
        for(int[] x:dp){
            Arrays.fill(x,-1);
        }
        
        solUtil(obstacleGrid,m,n,0,0,dp);
        
        return dp[0][0];
        
    }
    
    

    public int solUtil(int[][] nums,int m,int n,int i,int j,int[][] dp){
        

        if(i>=m || j>=n) return 0;
        
        if(dp[i][j]!=-1) return dp[i][j];
        
        if(nums[i][j]==1) return dp[i][j]=0;    //obstacle
        if(i==m-1 && j==n-1) return dp[i][j]=1;
        
        
        
        int right=solUtil(nums,m,n,i,j+1,dp);
        int down=solUtil(nums,m,n,i+1,j,dp);
        
        
        
        dp[i][j]=right+down;
        
        
        return dp[i][j];
    }
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

**********************************
Solution 3 : Tabulation
**********************************


************************************************************************************************************************

 TC = O(MxN)) to compute these states | SC= O(M x N) dp[][] space 

**************************************************************************************************************************



class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        
        int m=obstacleGrid.length;
        int n=obstacleGrid[0].length;
        
        int[][] dp=new int[m][n];
        
        for(int i=m-1;i>=0;i--){
            
            for(int j=n-1;j>=0;j--){
                
                if(obstacleGrid[i][j]==1){
                    dp[i][j]=0;
                }
                else if(i==m-1 && j==n-1) {
                    dp[i][j]=1;
                }else{

                    int up=0;
                    int left=0;
                    
                    if(j+1<n){
                       up=dp[i][j+1]; 
                    }
                    
                    if(i+1<m){
                         left=dp[i+1][j];
                    }
                   
                    
                    dp[i][j]=up+left;
                }
            }
        }
        
        return dp[0][0];
        
    }
    
    
}
