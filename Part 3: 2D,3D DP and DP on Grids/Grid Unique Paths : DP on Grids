

Problem Link : https://leetcode.com/problems/unique-paths/

Recursion Tree : ![aaa](https://user-images.githubusercontent.com/20686188/178889868-fb9fb5da-4ecc-45e4-9efd-994c605251a6.jpg)

Explanation : 
1. Basicaly, we are moving either right or down till we reach the last block. So we try all possible paths.
2. In this image, i have written the indices.


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

**********************************
Solution 1: Recursion (gives TLE)
**********************************

**********************************************************************************************************

Note : Implemented recursion based on bottom up approach.  

TC = O(2^ (MxN)) | SC= O(length of path) = O(m-1 + n-1) -> stack space will go length of path deeper 

***********************************************************************************************************

class Solution {
    public int uniquePaths(int m, int n) {
     
        return solUtil(m,n,0,0);
    }
    
    public int solUtil(int m,int n,int i,int j){
        
        if(i>=m || j>=n) return 0;
        if(i==m-1 && j==n-1) return 1;
        
        int count=0;
        
        count+=solUtil(m,n,i+1,j);
        count+=solUtil(m,n,i,j+1);
        
        
        return count;  
    }
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

************************
Solution 2: Memoization
*************************



*************************************************************************************************************************************************************

TC = O(M x N) = No. of states | SC= O(m-1 + n-1) + O(M x N) -> path length in stack space + dp[][] space

Image to explain dp matrix : ![image](https://user-images.githubusercontent.com/20686188/178886168-ad5c703a-8866-4f35-b54f-03530a80ec61.png)

Explanation : 
1. We have implemented memoization as bottom-up (instead of top-down).
2. So, in this dp matrix, at any position i.e dp[i][j] stores the value, that represents no of ways to reach last position (i.e bottom right corner) from that 
particular index i,j. 
3. So, out final answer is stroed in dp[0][0]. As we want to know the no of ways from top left corner to bottom right corner. 

*************************************************************************************************************************************************************

class Solution {
    public int uniquePaths(int m, int n) {
     
        int[][] dp=new int[m][n];
        
        for(int[] x:dp){
            Arrays.fill(x,-1);
        }
        
        solUtil(m,n,0,0,dp);
        
        return dp[0][0];
    }
    
    public int solUtil(int m,int n,int i,int j,int[][] dp){
        
        if(i==m-1 && j==n-1) return dp[i][j]=1;
        if(i>=m || j>=n) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        
        int count=0;
        
        count+=solUtil(m,n,i+1,j,dp);
        count+=solUtil(m,n,i,j+1,dp);

        
        return dp[i][j]=count;
        
        
    }
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

************************
Solution 3: Tabulation 
*************************

*******************************************************************
TC = O(MxN)) to compute these states | SC= O(M x N) dp[][] space
*******************************************************************

class Solution {
    public int uniquePaths(int m, int n) {
     
        int[][] dp=new int[m][n];
 
         for(int i=m-1;i>=0;i--){
             for(int j=n-1;j>=0;j--){
                  if(i==m-1 && j==n-1){
                    dp[i][j]=1;

                }
                else{

                    int up=0;
                    int right=0;

                    if(i+1<m){
                        up=dp[i+1][j];

                    }

                    if(j+1<n){
                        right=dp[i][j+1];
                    }


                    dp[i][j]=up+right;
                }
                 
             }
         }   
        
        return dp[0][0];
    }
    

}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

****************************************
Solution 3: Tabulation - Space Optimized
****************************************

*********************************************************************************************************************************************************
TC = O(N * 4) * 3 => there are 3 nested loops | SC = O(N)-> space of prev[] of size N 


Explanation of Space Optimization : 
 1. Bascially, we first create prev array of size of col length. and it initally sotres our base case.
 2. Because using base case we create other values, going up or down. 
 3. And within for loops, we create curr arrat of same col length. and it sores all the values calculated using base case values 
 in prev array. 
 4. After every iteration of second for loop, we assign curr to prev. 
***********************************************************************************************************************************************************




class Solution {
    public int uniquePaths(int m, int n) {
     
       int prev[]=new int[n];
 
         for(int i=m-1;i>=0;i--){
             
             int temp[]=new int[n];
             
             for(int j=n-1;j>=0;j--){
                 
                  if(i==m-1 && j==n-1){
                    temp[j]=1;

                }
                else{

                    int up=0;
                    int right=0;

                    if(i+1<m){
                        up=prev[j];

                    }

                    if(j+1<n){
                        right=temp[j+1];
                    }


                    temp[j]=up+right;
                }
                 
             }
             prev=temp;
         }   
        
        return prev[0];
    }
    

}
