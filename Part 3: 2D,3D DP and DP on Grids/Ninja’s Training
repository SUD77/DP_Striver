
Problem Link : https://www.codingninjas.com/codestudio/problems/ninja-s-training_3621003?source=youtube&campaign=striver_dp_videos&leftPanelTab=0

Credit for Image and approach : https://github.com/shivangii-sri

Recursion Tree Image : ![shivi](https://user-images.githubusercontent.com/20686188/178778036-426b18ed-f2d4-4312-852f-00f238461f56.jpg)


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

************************************************************************************************************************************************************
Approach: 
1. Start with last day (n-1th day) of points array.
2. Initially we pass task=3, meaning initially no task has been done. 
3. At each day, we evaluate max merit points by finding all possible ways
    a. We call recursion for every task not matching with current task no, bcz same task cannot be repeated on consecutive days.
    b. We add current merit points of current arr[day][task]
    c. While calling the function, we pass the prev day as day-1, with task not matching in i=0 to 2.
    d. We store maxi of all the func calls. and return maxi.
4. BASE CASE- whenever we reach day 0, with task no. say x, it means task x has been performed previously.
Thus we return max merit b/w other two tasks in day 0.

**************************************************************************************************************************************************************

**********************
Solution 1: Recursion 
**********************

public class Solution {
    public static int ninjaTraining(int n, int points[][]) {

        return solUtil(n-1,points,n);
    }
    
    public static int solUtil(int n,int points[][],int task){
        if(n==0) {
             int maxi=0;
            for(int i=0;i<=2;i++){
                if(i!=task){
                    maxi=Math.max(maxi,points[0][i]);
                }
            }
            return maxi;
        }

        int resultP=0;

        for(int i=0;i<=2;i++){

            int tempP=0;
            if(i!=task){
                tempP= points[n][i] + solUtil(n-1,points,i);
                resultP=Math.max(tempP,resultP);
            }
            

        }

        return resultP;
    }

}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

************************
Solution 2 : Memoization
*************************


*************************************************************************************************************************************************************


Note : This code give stackOver flow error on Coding ninja for one test case. So this is because, even after optimization, it takes lot of space. I 
even copy pasted striver's java code. Same error. 

*************************************************************************************************************************************************************

import java.util.Arrays;

public class Solution {
    public static int ninjaTraining(int n, int points[][]) {

        int[][] dp=new int[n][4];
        
        for(int[] x:dp){
            Arrays.fill(x,-1);
        }
        
        return solUtil(n-1,points,3,dp);
    }
    
    public static int solUtil(int n,int points[][],int task,int[][] dp){
        
        if(dp[n][task]!=-1) return dp[n][task];        
        
        if(n==0) {
             int maxi=0;
            for(int i=0;i<=2;i++){
                if(i!=task){
                    maxi=Math.max(maxi,points[0][i]);
                }
            }
            return dp[n][task]=maxi;
        }

        int resultP=0;

        for(int i=0;i<=2;i++){

            int tempP=0;
            if(i!=task){
                tempP= points[n][i] + solUtil(n-1,points,i,dp);
                resultP=Math.max(tempP,resultP);
            }
            

        }

        return dp[n][task]= resultP;
    }

}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

***********************
Solution 3 : Tabulation
************************


import java.util.Arrays;

public class Solution {
    public static int ninjaTraining(int n, int points[][]) {

         int dp[][] = new int[n][4];
      
        dp[0][0]=Math.max(points[0][1],points[0][2]);
        dp[0][1]=Math.max(points[0][0],points[0][2]);
        dp[0][2]=Math.max(points[0][0],points[0][1]);
        dp[0][3]=Math.max(points[0][1],Math.max(points[0][1],points[0][2]));
        
        
        for (int day = 1; day <n; day++) {
            for(int last=0;last<4;last++){
                dp[day][last]=0;
                
                for(int task=0;task<=2;task++){
                   if(task!=last){
                       int activity=points[day][task] + dp[day-1][task];
                       dp[day][last]=Math.max(dp[day][last],activity);
                   } 
                }
            }

        }

        return dp[n-1][3];
    }
    

}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

***********************
Solution 3 : Tabulation
************************


