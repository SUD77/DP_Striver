

LeetLink : https://leetcode.com/problems/minimum-falling-path-sum/

*************************************************************************************************************************************************************

Dp Array Image : ![dsdf](https://user-images.githubusercontent.com/20686188/179344616-e01a2c0d-f500-47e1-93cb-352a1538623d.jpg)

Expalanation : Explore all the paths from a index and store the min value possible for it on these paths at that index.



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 1 : Recursion (Will give TLE)

TC = O(3 ^ (N x M)) | SC= O(N) -> stack space will go upto length of rows deep

********************************************************************************

class Solution {
    public int minFallingPathSum(int[][] matrix) {
        
        
        int m=matrix.length;
        int n=matrix[0].length;
        
        int result=Integer.MAX_VALUE;
        
        for(int col=0;col<n;col++){
            
            result=Math.min(solUtil(m,n,matrix,0,col),result);    
        }
        
        return result;
    }
    
    public int solUtil(int m,int n,int[][] matrix,int i,int j){
        
        
        if( j>=n || j<0) return Integer.MAX_VALUE;

        if(i==m-1) return matrix[i][j];

        
        int left=solUtil(m,n,matrix,i+1,j-1);
        int down=solUtil(m,n,matrix,i+1,j);
        int right=solUtil(m,n,matrix,i+1,j+1);

        return  matrix[i][j]+Math.min(left,Math.min(down,right));
    }
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 2 : Memoization

 TC = O(N x M) = No. of states |  SC= O(N) ->stack space + O(N x M)->dp[][] space

********************************************************************************


class Solution {
    public int minFallingPathSum(int[][] matrix) {
        
        
        int m=matrix.length;
        int n=matrix[0].length;
        
        int[][] dp=new int[m][n];
        
        for(int[] x:dp){
            Arrays.fill(x,-1);
        }
        
        int result = Integer.MAX_VALUE;
        for(int col=0;col<n;col++){
            
           
            result=Math.min(solUtil(m,n,matrix,0,col,dp),result);
            
        }
        
        return result;
    }
    
    public int solUtil(int m,int n,int[][] matrix,int i,int j,int[][] dp){
        
        
        if( j>=n || j<0) return Integer.MAX_VALUE;
        
        if(dp[i][j]!=-1) return dp[i][j];
        

        if(i==m-1) return dp[i][j]=matrix[i][j];

        
        int left=solUtil(m,n,matrix,i+1,j-1,dp);
        int down=solUtil(m,n,matrix,i+1,j,dp);
        int right=solUtil(m,n,matrix,i+1,j+1,dp);

        return  dp[i][j]=matrix[i][j]+Math.min(left,Math.min(down,right));
    }
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 3 : Tabulation

*************************************************************************************************************************************************************

TC = O(N x M)) to compute dp[][] | SC= O(M x N) dp[][] space

Explanation : 

1. Bacially we are filling the dp array here top to bottom. 
2. Before starting, we initialize the last row of dp (in first for loop)
3. And second for loop, we start from m-2. and check for all possible paths for index in row = m-2. And store MIN value at index[m-2][col], col is from 0 to n.
*************************************************************************************************************************************************************


class Solution {
    public int minFallingPathSum(int[][] matrix) {
        
        
        int m=matrix.length;
        int n=matrix[0].length;
        
        int[][] dp=new int[m][n];
        
       
        //basecase, when we are at last row. So filling col
       for(int j=0;j<n;j++){
           dp[m-1][j]=matrix[m-1][j];
       }
        
        
        for(int i=m-2;i>=0;i--){
            
            for(int j=0;j<n;j++){

                int up=dp[i+1][j];

                int left=0;
                if(j-1>=0) left+=dp[i+1][j-1];
                else left+=Integer.MAX_VALUE; 
                
              
                int right=0;
                if(j+1<n) right+=dp[i+1][j+1];
                else right+=Integer.MAX_VALUE; ;
                
                dp[i][j]=matrix[i][j]+  Math.min(up,Math.min(left,right));
            }
        }
        
        int result=Integer.MAX_VALUE;
        
        for(int j=0;j<n;j++){
            result=Math.min(result,dp[0][j]);
        }

        
        return result;
    }
    
   
}



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 4 :Tabulation - Space Optimized

TC = O(N x M)  | SC = O(N)-> space of prev[] of size N =columns size


Explanation of Space Optimization : 
 1. Bascially, we first create prev array of size of col length. and it initally sotres our base case.
 2. Because using base case we create other values, going up or down. 
 3. And within for loops, we create curr arrat of same col length. and it sores all the values calculated using base case values 
 in prev array. 
 4. After every iteration of second for loop, we assign curr to prev. 

********************************************************************************



class Solution {
    public int minFallingPathSum(int[][] matrix) {
        
        
        int m=matrix.length;
        int n=matrix[0].length;
        
        int[] prev=new int[n];
        
        
        Arrays.fill(prev,0);
        
       
        //basecase, when we are at last row. So filling col
       for(int j=0;j<n;j++){
           prev[j]=matrix[m-1][j];
       }
        
        
        for(int i=m-2;i>=0;i--){
            
            int[] curr=new int[n];
            
            for(int j=0;j<n;j++){

                int up=prev[j];

                int left=0;
                if(j-1>=0) left+=prev[j-1];
                else left+=Integer.MAX_VALUE; 
                
              
                int right=0;
                if(j+1<n) right+=prev[j+1];
                else right+=Integer.MAX_VALUE; ;
                
                curr[j]=matrix[i][j]+  Math.min(up,Math.min(left,right));
            }
            prev=curr;
        }
        
        int result=Integer.MAX_VALUE;
        
        for(int j=0;j<n;j++){
            result=Math.min(result,prev[j]);
        }

        
        return result;
    }
    
   
}
