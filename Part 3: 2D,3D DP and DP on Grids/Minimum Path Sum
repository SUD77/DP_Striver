
LeetLink : https://leetcode.com/problems/minimum-path-sum/



************************************************************************************************************************************************************

Recursion Tree : ![Recu](https://user-images.githubusercontent.com/20686188/179062650-288c6da9-0168-406e-8b2f-26ab753e2e69.jpg)

Explanation of Recursion Tree : 
1. I am applying recursion bottom up. 
2. Basically, I start from index 0,0 and go till the bottom right, following diff paths (down and right only)
3. And getting the minimum sum.




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

*************************************
Solution 1: Recursion (will give TLE)
*************************************

***********************************************************************************************************************************************************

TC = O(2^ (MxN)) | SC= O(length of path) = O(m-1 + n-1) -> stack space will go length of path deeper 


Note : 
1. Line returning Integer.Max_value is very imp, as it eleiminates the initial large value and keeps min value. 
***********************************************************************************************************************************************************

class Solution {
    public int minPathSum(int[][] grid) {
        
        
        int m=grid.length;
        int n=grid[0].length;
        
        return solUtil(m,n,grid,0,0);
    }
    
    public int solUtil(int m,int n, int[][] nums,int i,int j){
        
        if(i>=m || j>=n) return Integer.MAX_VALUE;
        if(i==m-1 && j==n-1) return nums[i][j];
        
        int currVal=nums[i][j];
        int result=0;
        
        int down=solUtil(m,n,nums,i+1,j);
        int right=solUtil(m,n,nums,i,j+1);
        
        
        result=currVal+Math.min(down,right);
        
        return result;
        
        
    }
}








////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

*************************************
Solution 2: Memoization
*************************************

***********************************************************************************************************************************************************

Time Complexity: O(N*M)
Space Complexity: O((M-1)+(N-1)) + O(N*M)


Image of dp matrix: ![dp](https://user-images.githubusercontent.com/20686188/179062799-d69e756a-6f9c-4ca5-aaca-1d9d3f4ca54d.jpg)

Explanation : 
1. In this, baically, each index stores the min sum path possible to reach from it to the extreme bottom right.
2. Final answer is stored in 0,0 as we want to see the min path sum from 0,0 to last block.


Note:
1. I have implemented, memo in bottom up fashion. 
***********************************************************************************************************************************************************


class Solution {
    public int minPathSum(int[][] grid) {
        
   
        int m=grid.length;
        int n=grid[0].length;
        
        int dp[][]=new int[m][n];
        
        for(int[] x:dp){
            Arrays.fill(x,-1);
        }
        
        
        solUtil(m,n,grid,0,0,dp);
        
        return dp[0][0];
    }
    
    public int solUtil(int m,int n, int[][] nums,int i,int j,int[][] dp){
        
        if(i>=m || j>=n) return Integer.MAX_VALUE;
        
        if(dp[i][j]!=-1) return dp[i][j];
        
        
        if(i==m-1 && j==n-1) return dp[i][j]=nums[i][j];
        
        int currVal=nums[i][j];
        int result=0;
        
        int down=solUtil(m,n,nums,i+1,j,dp);
        int right=solUtil(m,n,nums,i,j+1,dp);
        
        
        dp[i][j]=currVal+Math.min(down,right);
        
        return dp[i][j];
        
        
    }
}




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

*************************************
Solution 3: Tabulation
*************************************

***********************************************************************************************************************************************************

Time Complexity: O(N*M)
Space Complexity: O(N*M)

***********************************************************************************************************************************************************


class Solution {
    public int minPathSum(int[][] grid) {
        
   
        int m=grid.length;
        int n=grid[0].length;
        
        int dp[][]=new int[m][n];
        
       
        for(int i=m-1;i>=0;i--){
            
            for(int j=n-1;j>=0;j--){
                
                if(i==m-1 && j==n-1){
                    dp[i][j]=grid[i][j];
                }else{
                    
                    int down=Integer.MAX_VALUE;
                    int right=Integer.MAX_VALUE;
                    
                    if(i+1<m){
                       down=dp[i+1][j]; 
                    }
                    
                    if(j+1<n){
                       right=dp[i][j+1]; 
                    }
                    
                    dp[i][j]=grid[i][j]+Math.min(down,right);
                }
            }
        }
        
        return dp[0][0];
    }
    
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

*****************************************
Solution 4: Tabulation - Space Optimmized
*****************************************

***********************************************************************************************************************************************************
 TC = O(m x n)  | SC = O(N)-> space of prev[] of size N=columns size
 
 
 Explanation of Space Optimization : 
 1. Bascially, we first create prev array of size of col length. and it initally sotres our base case.
 2. Because using base case we create other values, going up or down. 
 3. And within for loops, we create curr arrat of same col length. and it sores all the values calculated using base case values 
 in prev array. 
 4. After every iteration of second for loop, we assign curr to prev. 
***********************************************************************************************************************************************************



class Solution {
    public int minPathSum(int[][] grid) {
        
   
        int m=grid.length;
        int n=grid[0].length;
        
        int prev[]=new int[n];
        
       
        for(int i=m-1;i>=0;i--){
            
            int temp[]=new int[n];
            
            for(int j=n-1;j>=0;j--){
                
                if(i==m-1 && j==n-1){
                   temp[j]=grid[i][j];
                }else{
                    
                    int down=Integer.MAX_VALUE;
                    int right=Integer.MAX_VALUE;
                    
                    if(i+1<m){
                       down=prev[j]; 
                    }
                    
                    if(j+1<n){
                       right=temp[j+1]; 
                    }
                    
                    temp[j]=grid[i][j]+Math.min(down,right);
                }
            }
            prev=temp;
        }
        
        return prev[0];
    }
    
}
