Leet : https://leetcode.com/problems/longest-increasing-subsequence/

Note : 

1. Just doing recursion and memoization right now. 
2. In recursion, I have called prevIndex from -1, so in memo, to adjust that in 2d array, I did prevIndex+1.


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 1: Recursion

class Solution {
    public int lengthOfLIS(int[] nums) {
        
        int n=nums.length;
        
        return solUtil(nums,-1,0);
    }
    
    public int solUtil(int[] nums,int prevIndex,int nextIndex){
        
        if(nextIndex==nums.length){
            return 0;
        }
        
        
        int notTake=solUtil(nums,prevIndex,nextIndex+1);
        
        int take=0;
        
        if(prevIndex==-1){
            take=1+solUtil(nums,nextIndex,nextIndex+1);
        }else if(nums[nextIndex]>nums[prevIndex]){
            take=1+solUtil(nums,nextIndex,nextIndex+1);
        }
           
            
        return Math.max(take,notTake);    
         
        
    }
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 2: Memoization

class Solution {
    public int lengthOfLIS(int[] nums) {
        
        int n=nums.length;
        
        int[][] dp=new int[n+1][n+1];
        
        for(int[] x:dp){
            Arrays.fill(x,-1);
        }
        
        return solUtil(nums,-1,0,dp);
    }
    
    public int solUtil(int[] nums,int prevIndex,int nextIndex,int[][] dp){
        
        if(nextIndex==nums.length){
            return 0;
        }
        
        if(dp[prevIndex+1][nextIndex]!=-1) return dp[prevIndex+1][nextIndex]; 
        
        
        int notTake=solUtil(nums,prevIndex,nextIndex+1,dp);
        
        int take=0;
        
        if(prevIndex==-1){
            take=1+solUtil(nums,nextIndex,nextIndex+1,dp);
        }else if(nums[nextIndex]>nums[prevIndex]){
            take=1+solUtil(nums,nextIndex,nextIndex+1,dp);
        }
           
            
        return dp[prevIndex+1][nextIndex]=Math.max(take,notTake);    
         
        
    }
}




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 3: Tabulation

Note : 
1. This solution is of striver. 
2. I tried to do by my memoization code but couldnt. Will try again in 2nd iteration. 
3. If you see in this code, here inner for loop contians prevIndex and outer Index. Mine was reverse of it. Will try again with that. 


class Solution {
    public int lengthOfLIS(int[] nums) {
        
        int n=nums.length;
        
        int[][] dp=new int[n+1][n+1];
        
        for(int[] x:dp){
            Arrays.fill(x,0);
        }
        

        for(int index=n-1;index>=0;index--){
            
            for(int prevIndex=index-1;prevIndex>=-1;prevIndex--){
                
                int len=dp[index+1][prevIndex+1];
                
                if(prevIndex == -1 || nums[index]>nums[prevIndex]){
                    len=Math.max(len,1+dp[index+1][index+1]);
                }
                
                dp[index][prevIndex+1]=len;
            }
        }
        
        //To print dp array
        // for(int[] x:dp){
        //     System.out.println(Arrays.toString(x));
        // }
        
        return dp[0][0];
    }
    

}
