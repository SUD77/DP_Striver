Leet : https://leetcode.com/problems/number-of-longest-increasing-subsequence/

Note : 
1. Followed Striver's video for this. 
2. Did this by tabulation (as shown in the video).
3. Will do recursion, memo in 2nd iteration. 


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
    public int findNumberOfLIS(int[] arr) {
        
        int n=arr.length;
        
        
        int[] dp=new int[n];
        int[] count=new int[n];
        
        Arrays.fill(dp,1);
        Arrays.fill(count,1);
        
        int maxi=1;
        
        for(int i=0; i<n;i++){
            
            for(int prev=0;prev<i;prev++){
                
                if(arr[prev]<arr[i] && 1 + dp[prev] > dp[i]){
                    dp[i]=1+dp[prev];
                    count[i]=count[prev];
                }else if(arr[prev] < arr[i] && 1+dp[prev]==dp[i]){
                    count[i]+=count[prev];
                }
            }
            maxi=Math.max(maxi,dp[i]);
        }
        
        int nos=0;
        
        for(int i=0;i<n;i++){
            if(dp[i]==maxi) nos+=count[i];
        }
        
        return nos;
        
    }
}
