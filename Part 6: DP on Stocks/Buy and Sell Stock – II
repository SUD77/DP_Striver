Leetcode : https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 1: Recursion

class Solution {
    public int maxProfit(int[] prices) {
        
        int n=prices.length;
        
        return solUtil(prices,n,0,1);
    }
    
    public int solUtil(int[] prices,int n,int index,int buy){
        
        if(index==n) return 0;
        
        int profit=0;
        
        if(buy==1){
            
            profit=Math.max(-prices[index] + solUtil(prices,n,index+1,0), solUtil(prices,n,index+1,1));
        }else{
            
            profit=Math.max(prices[index] + solUtil(prices,n,index+1,1),solUtil(prices,n,index+1,0));
        }
        
        
        return profit;
    }
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 2: Memoization

class Solution {
    public int maxProfit(int[] prices) {
        
        int n=prices.length;
        
        int[][] dp=new int[n][2];
        
        for(int[] x:dp){
            Arrays.fill(x,-1);
        }
        
        return solUtil(prices,n,0,1,dp);
    }
    
    public int solUtil(int[] prices,int n,int index,int buy,int[][] dp){
        
        if(index==n) return 0;
        
        if(dp[index][buy]!=-1) return dp[index][buy];
        
        int profit=0;
        
        if(buy==1){
            
            profit=Math.max(-prices[index] + solUtil(prices,n,index+1,0,dp), solUtil(prices,n,index+1,1,dp));
        }else{
            
            profit=Math.max(prices[index] + solUtil(prices,n,index+1,1,dp),solUtil(prices,n,index+1,0,dp));
        }
        
        
        return dp[index][buy]=profit;
    }
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 3: Tabulation

class Solution {
    public int maxProfit(int[] prices) {
        
        int n=prices.length;
        
        int[][] dp=new int[n+1][2];
        
        for(int[] x:dp){
            Arrays.fill(x,0);
        }
        
    
        dp[n][0]=dp[n][1]=0;
        
        for(int i=n-1;i>=0;i--){
            
            for(int buy=0;buy<=1;buy++){
                
                int profit=0;
                
                 if(buy==1){
            
                    profit=Math.max(-prices[i] + dp[i+1][0], dp[i+1][1]);
                }else{
            
                    profit=Math.max(prices[i] + dp[i+1][1],dp[i+1][0]);
                }
                dp[i][buy]=profit;
            }
        }
        
        return dp[0][1];
    }
    
   
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 4: Space Optimization

class Solution {
    public int maxProfit(int[] prices) {
        
        int n=prices.length;
        
        int[] ahead=new int[2];
        int[] cur=new int[2];
        
        ahead[0]=ahead[1]=0;
        
        for(int i=n-1;i>=0;i--){
            
            for(int buy=0;buy<=1;buy++){
                
                int profit=0;
                
                 if(buy==1){
            
                    profit=Math.max(-prices[i] + ahead[0], ahead[1]);
                }else{
            
                    profit=Math.max(prices[i] + ahead[1],ahead[0]);
                }
                cur[buy]=profit;
            }
            ahead=cur;
        }
        
        return ahead[1];
    }
    
   
}
