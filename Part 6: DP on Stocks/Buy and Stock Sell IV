LeetCode link : https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/

Note: 
1. This q and Best Time to Buy and Sell Stock III, are same. 
2. I have written just 3 methods rightn now. Will write space optimization in second iteration. 


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 1 : Recursion

class Solution {
    public int maxProfit(int[] prices) {
        
        int n=prices.length;
        int k=2;
        
        return solUtil(prices,n,0,1,k);
    }
    
    public int solUtil(int[] prices,int n,int index,int buy,int transaction){
        
        
        if(transaction==0) return 0;
        if(index==n) return 0;
        
        int profit=0;
        
        if(buy==1){
            
            profit=Math.max(-prices[index]+solUtil(prices,n,index+1,0,transaction),solUtil(prices,n,index+1,1,transaction));
        }else{
            
            profit=Math.max(prices[index] + solUtil(prices,n,index+1,1,transaction-1) , solUtil(prices,n,index+1,0,transaction));
        }
        
        return profit;
        
    }
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 2 : Memoization


class Solution {
    public int maxProfit(int[] prices) {
        
        int n=prices.length;
        int k=2;
        
        int[][][] dp=new int[n][2][k+1];
        
        for(int[][] x:dp){
            for(int[] y:x){
                Arrays.fill(y,-1);
            }
        }
        
        return solUtil(prices,n,0,1,k,dp);
    }
    
    public int solUtil(int[] prices,int n,int index,int buy,int transaction,int[][][] dp){
        
        
        
        if(transaction==0) return 0;
        if(index==n) return 0;
        
        if(dp[index][buy][transaction]!=-1) return dp[index][buy][transaction];
        
        int profit=0;
        
        if(buy==1){
            
            profit=Math.max(-prices[index]+solUtil(prices,n,index+1,0,transaction,dp),solUtil(prices,n,index+1,1,transaction,dp));
        }else{
            
            profit=Math.max(prices[index] + solUtil(prices,n,index+1,1,transaction-1,dp) , solUtil(prices,n,index+1,0,transaction,dp));
        }
        
        return dp[index][buy][transaction]=profit;
        
    }
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 3 : Tabulation

class Solution {
    public int maxProfit(int[] prices) {
        
        int n=prices.length;
        int k=2;
        
        int[][][] dp=new int[n+1][2][k+1];
        
        
        /* Doint all values to zero will ensure that our base cases are captured here
        i.e of dp[0..to..n][0 or 1][0] = 0 and similarly for when index is n, everything will be 0. Look at strivers video, if any doubt*/
        for(int[][] x:dp){
            for(int[] y:x){
                Arrays.fill(y,0);
            }
        }
        
        for(int index=n-1;index>=0;index--){
            
            for(int buy=0;buy<=1;buy++){
                
                for(int cap=1;cap<=k;cap++){
                    
                    if(buy==1){
                        dp[index][buy][cap]=Math.max(-prices[index]+dp[index+1][0][cap],dp[index+1][1][cap]);
                    } else {
                        dp[index][buy][cap]= Math.max(prices[index] + dp[index+1][1][cap-1] , dp[index+1][0][cap]);
                    }
                }
            }
        }
        
        return dp[0][1][k];
    }
    
   
}
